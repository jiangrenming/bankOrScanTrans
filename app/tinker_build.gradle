
//老apk存储的位置
def bakPath = file("${buildDir}/bakApk/")
//获取版本号
def appVersion() {
    return android.defaultConfig.versionName
}
def getTinkerBuildFlavorDirectory() {
    return ext.tinkerBuildFlavorDirectory
}

ext{
    //开启热修复功能:true代表开启
    tinkerEnabled = true
    //老apk存储的路径
    tinkerOldApkPath = "${bakPath}/MYQF_RELEASE_V1.0.4_2017122214.apk"
    //保持混淆方式,mapping
    tinkerApplyMappingPath = "${bakPath}/app-release-1222-14-03-43-mapping.txt"
    //保持R.txt资源文件
    tinkerApplyResourcePath = "${bakPath}/app-release-1222-14-03-43-R.txt"
    //多渠道
    tinkerBuildFlavorDirectory = "${bakPath}/app-1018-17-32-47"
}

//判断热修复是否开启
def buildWithTinker() {
    return hasProperty("TINKER_ENABLE") ? TINKER_ENABLE : ext.tinkerEnabled
}

//获取老apk存储的位置
def getOldApkPath() {
    return hasProperty("OLD_APK") ? OLD_APK : ext.tinkerOldApkPath
}

//获取编译时的混淆方式
def getApplyMappingPath() {
    return hasProperty("APPLY_MAPPING") ? APPLY_MAPPING : ext.tinkerApplyMappingPath
}
//获取R.txt文件中ResId
def getApplyResourceMappingPath() {
    return hasProperty("APPLY_RESOURCE") ? APPLY_RESOURCE : ext.tinkerApplyResourcePath
}

//获取tinkerID号，这里使用项目的版本号来代替
def getTinkerIdValue() {
    return hasProperty("TINKER_ID") ? TINKER_ID : appVersion()
}

if (buildWithTinker()){
    //热修复开启则安装tinker的插件
    apply plugin: 'com.tencent.tinker.patch'

    tinkerPatch{  //--->全局信息相关的配置项
        //老apk的存储位置，默认是null 但实际不能为空
        oldApk = getOldApkPath()
        /**
         * 1.默认为false
         * 2.新增四大组件
         * 3.minSdkVersion小于14，但是dexMode的值为"raw"
         * 4.定义在dex.loader用于加载补丁的类不在main dex中
         * 5.定义在dex.loader用于加载补丁的类出现修改
         * 6.resources.arsc改变，但没有使用applyResourceMapping编译
         * 满足 2--6中的任何一个 + 1条件，则编译中断
         */
        ignoreWarning = false
        /**
         * 在运行过程中，验证基准apk包与补丁包的签名是否一致，我们是否需要为你签名
         */
        useSign = true
        /**
         * 获取是否开启tinker
         */
        tinkerEnable = buildWithTinker()

        buildConfig{  //---->编译相关的配置项
            /**
             * 可选参数
             * 保持新apk编译时，使用旧apk proguard混淆方式
             * 从而减少补丁包的大小
             */
             applyMapping = getApplyMappingPath()
            /**
             * 可选参数
             * 编译新apk时，保持旧apk中R.txt文件中resId的分配
             *1.可以减少补丁包的大小，
             * 2.同时也避免由于ResId改变导致remote view异常
             */
             applyResourceMapping = getApplyResourceMappingPath()
            /**
             * 不可为空
             * 可以使用版本号或git 版本号来代替
             * 验证基准apk包的tinkerId是否等于补丁包的tinkerId，这个是决定补丁包能运行在哪些基准包上面
             */
            tinkerId = getTinkerIdValue()
            /**
             * 如果有多个dex,编译补丁时可能会由于类的移动导致变更增多。
             * 若打开keepDexApply模式，补丁包将根据基准包的类分布来编译。
             */
            keepDexApply = false
            //是否开启加固
           // isProtectedApp = false
        }

        dex{  //---->dex相关的配置项
            /**
             * 默认使用jar
             * 存在jar 和raw模式
             * 如果minSdkVersion < 14 必须使用jar模式
             * raw模式，保持输入dex的格式
             * jar模式,把输入dex重新压缩封装到jar
             */
            dexMode = 'jar'
            /**
             * 必填项
             * 需要处理dex路径，
             * 支持*、?通配符，
             * 必须使用'/'分割。
             * 路径是相对安装包的，例如assets/...
             */
            pattern = ["classes*.dex",
                        "assets/secondary-dex-?.jar"]
            /**
             * 必填项
             * 1.定义了哪些类在加载补丁包的时候会用到,这些类是通过Tinker无法修改的类，也是一定要放在main dex的类，包括如下：
             * [1.自定义的Application类；
             *  2.Tinker库中用于加载补丁包的部分类，即com.tencent.tinker.loader.*
             *  3.自定义了TinkerLoader，需要将它以及它引用的所有类也加入loader中
             *  4.其他一些你不希望被更改的类，例如Sample中的BaseBuildInfo类。
             *  ]
             * 注意的是，这些类的直接引用类也需要加入到loader中。或者你需要将这个类变成非preverify。
             * 使用1.7.6版本之后的gradle版本，参数1、2会自动填写。
             * 若使用newApk或者命令行版本编译，1、2依然需要手动填写。
             */
            loader = [
                    "tinker.sample.android.app.BaseBuildInfo"]
        }

        lib{   //----> lib相关的配置项
            /**
             * 必填项
             * 处理lib路径，支持*、?通配符，必须使用'/'分割。
             * 与dex.pattern一致, 路径是相对安装包的，例如assets/...
             */
            pattern = ["lib/*/*.so"]
        }

        res{   //--->res相关的配置项
            /**
             * 必填项
             * 处理res路径，支持*、?通配符，必须使用'/'分割。
             * 与dex.pattern一致, 路径是相对安装包的，例如assets/...，
             * 注意的是，只有满足pattern的资源才会放到合成后的资源包。
             */
            pattern = ["res/*", "assets/*", "resources.arsc", "AndroidManifest.xml"]
            /**
             * 支持*、?通配符，必须使用'/'分割。
             * 若满足ignoreChange的pattern，在编译时会忽略该文件的新增、删除与修改
             */
            ignoreChange = ["assets/sample_meta.txt"]
            /**
             * 修改的包的大小，默认使用100kb
             */
            largeModSize = 100
        }

        packageConfig{  //--->用于生成补丁包中的'package_meta.txt'文件
            /**
             * onfigField("key", "value"),
             * 默认我们自动从基准安装包与新安装包的Manifest中读取tinkerId,并自动写入configField。
             * 在这里，定义其他的信息，在运行时可以通过TinkerLoadResult.getPackageConfigByName得到相应的数值。
             * 但是建议直接通过修改代码来实现，例如BuildConfig。
             */
            configField("patchMessage", "tinker is sample to use")
            configField("platform", "all")
            configField("patchVersion", "1.0")
        }
        sevenZip{  //---->7zip路径配置项，执行前提是useSign为true
            zipArtifact = "com.tencent.mm:SevenZip:1.1.10"
        }
    }

    /**
     * 多渠道打包
     */
    List<String> flavors = new ArrayList<>();
    project.android.productFlavors.each {flavor ->
        flavors.add(flavor.name)
    }
    boolean hasFlavors = flavors.size() > 0

    /**
     * bak apk and mapping
     */
    android.applicationVariants.all { variant ->
        /**
         * task type, you want to bak
         */
        def taskName = variant.name
        def date = new Date().format("MMdd-HH-mm-ss")
        tasks.all {
            if ("assemble${taskName.capitalize()}".equalsIgnoreCase(it.name)) {
                it.doLast {
                    copy {   //--->复制的过程 <包括apk,mapping文件，R.txt文件>
                        def fileNamePrefix = "${project.name}-${variant.baseName}"
                        def newFileNamePrefix = hasFlavors ? "${fileNamePrefix}" : "${fileNamePrefix}-${date}"

                        def destPath = hasFlavors ? file("${bakPath}/${project.name}-${date}/${variant.flavorName}") : bakPath
                        from variant.outputs.outputFile
                        into destPath
                        rename { String fileName ->
                            fileName.replace("${fileNamePrefix}.apk", "${newFileNamePrefix}.apk")
                        }

                        from "${buildDir}/outputs/mapping/${variant.dirName}/mapping.txt"
                        into destPath
                        rename { String fileName ->
                            fileName.replace("mapping.txt", "${newFileNamePrefix}-mapping.txt")
                        }

                        from "${buildDir}/intermediates/symbols/${variant.dirName}/R.txt"
                        into destPath
                        rename { String fileName ->
                            fileName.replace("R.txt", "${newFileNamePrefix}-R.txt")
                        }
                    }
                }
            }
        }
    }
    project.afterEvaluate {
        //是否存在多渠道
        if (hasFlavors) {
            task(tinkerPatchAllFlavorRelease) {  //--->多渠道的release版本
                group = 'tinker'
                def originOldPath = getTinkerBuildFlavorDirectory()
                for (String flavor : flavors) {
                    def tinkerTask = tasks.getByName("tinkerPatch${flavor.capitalize()}Release")
                    dependsOn tinkerTask
                    def preAssembleTask = tasks.getByName("process${flavor.capitalize()}ReleaseManifest")
                    preAssembleTask.doFirst {
                        String flavorName = preAssembleTask.name.substring(7, 8).toLowerCase() + preAssembleTask.name.substring(8, preAssembleTask.name.length() - 15)
                        project.tinkerPatch.oldApk = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-release.apk"
                        project.tinkerPatch.buildConfig.applyMapping = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-release-mapping.txt"
                        project.tinkerPatch.buildConfig.applyResourceMapping = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-release-R.txt"

                    }

                }
            }

            task(tinkerPatchAllFlavorDebug) { //--->多渠道的debug版本
                group = 'tinker'
                def originOldPath = getTinkerBuildFlavorDirectory()
                for (String flavor : flavors) {
                    def tinkerTask = tasks.getByName("tinkerPatch${flavor.capitalize()}Debug")
                    dependsOn tinkerTask
                    def preAssembleTask = tasks.getByName("process${flavor.capitalize()}DebugManifest")
                    preAssembleTask.doFirst {
                        String flavorName = preAssembleTask.name.substring(7, 8).toLowerCase() + preAssembleTask.name.substring(8, preAssembleTask.name.length() - 13)
                        project.tinkerPatch.oldApk = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-debug.apk"
                        project.tinkerPatch.buildConfig.applyMapping = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-debug-mapping.txt"
                        project.tinkerPatch.buildConfig.applyResourceMapping = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-debug-R.txt"
                    }

                }
            }
        }
    }
}